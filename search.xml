<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NullPointerException</title>
    <url>/2023/04/03/NullPointException/</url>
    <content><![CDATA[<h1 id="Stream中toMap的NullPointerException"><a href="#Stream中toMap的NullPointerException" class="headerlink" title="Stream中toMap的NullPointerException"></a>Stream中toMap的NullPointerException</h1><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>今天测试在测试代码时，发现Collectors.toMap报了空指针异常，具体报错信息如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs java.lang.NullPointerException">at java.util.HashMap.merge(HashMap.java:1225)<br>at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)<br>at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)<br>at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382)<br>at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)<br>at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)<br>at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)<br>at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)<br>at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)<br>at org.mango.AppTest.shouldAnswerWithTrue(AppTest.java:26)<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>at java.lang.reflect.Method.invoke(Method.java:498)<br>at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)<br>at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)<br>at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)<br>at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)<br>at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)<br>at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)<br>at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)<br>at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)<br>at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)<br>at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)<br>at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)<br>at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)<br>at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)<br>at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)<br>at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)<br>at org.junit.runners.ParentRunner.run(ParentRunner.java:413)<br>at org.junit.runner.JUnitCore.run(JUnitCore.java:137)<br>at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)<br>at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)<br>at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)<br>at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)<br></code></pre></td></tr></table></figure>

<p>根据提示是HashMap.merge方法报的错，经过debug，发现Stream中toMap不允许key和value为null。而正常的Map,value是可以为空的，受了经验主义的影响</p>
<h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>toMap源码如下，可看到内部调用了map的merge方法</p>
<figure class="highlight plaintext"><figcaption><span>static <T, k, u, m extends map<k, u>></T,></span></figcaption><table><tr><td class="code"><pre><code class="hljs public">Collector&lt;T, ?, M&gt; toMap(Function&lt;? super T, ? extends K&gt; keyMapper,<br>                            Function&lt;? super T, ? extends U&gt; valueMapper,<br>                            BinaryOperator&lt;U&gt; mergeFunction,<br>                            Supplier&lt;M&gt; mapSupplier) &#123;<br>    BiConsumer&lt;M, T&gt; accumulator<br>            = (map, element) -&gt; map.merge(keyMapper.apply(element),<br>                                          valueMapper.apply(element), mergeFunction);<br>    return new CollectorImpl&lt;&gt;(mapSupplier, accumulator, mapMerger(mergeFunction), CH_ID);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>继续进入merge方法<br><img src="/2023/04/03/NullPointException/20230403230926.png"><br>可以看到value为空时，直接抛空指针异常</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>知道了原因，解决方法也就可以实现了，在collect之前，先对数据进行过滤<br>.filter(t -&gt; t.getAuthor() !&#x3D; null)<br>然后再转成map，就不会报空指针</p>
]]></content>
      <categories>
        <category>问题排查</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBean的生命周期</title>
    <url>/2023/04/04/Spring/</url>
    <content><![CDATA[<h1 id="SpringBean生命周期如下图所示"><a href="#SpringBean生命周期如下图所示" class="headerlink" title="SpringBean生命周期如下图所示"></a>SpringBean生命周期如下图所示</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>SpringBean的简单生成流程如下<br><img src="/2023/04/04/Spring/20230404210758.png"></p>
<h2 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h2><ol>
<li>根据资源的配置情况(xml,注解,java配置)，调用bean构造方法或者工厂方法实例化bean，主要是将配置转换成beanDefinition</li>
<li>属性填充，设置属性值。利用依赖注入完成bean属性值得配置注入</li>
<li>如果bean实现了BeanNameAware,则调用BeanNameAware接口的setBeanName方法</li>
<li>如果bean实现了BeanFactoryAware，调用BeanFactoryAware的setBeanFactory方法</li>
<li>如果bean实现了ApplicationContextAware，调用ApplicationContextAware的setApplicationContext方法</li>
<li>如果BeanPostProcessor和Bean关联，则Spring将调用该接口的预初始化方法postProcessBeforeInitialization方法队bean进行加工</li>
<li>如果bean实现了InitializingBean接口，则Spring将调用该接口的afterPropertiesSet方法</li>
<li>如果bean设置了init-method方法，则调用配置的init-method方法</li>
<li>如果BeanPostProcessor和Bean关联，调用postProcessAfterInitialization方法队bean进行加工</li>
<li>如果指定未专门指定bean的scope则默认为singleton,则会将此bean放入单例池中由spring管理，如果scope不是singleton，则不由spring管理，使用的时候创建bean.</li>
<li>如果bean实现了disposableBean接口，则spring会调用destroy方法销毁bean</li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/25/hello-world/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized</title>
    <url>/2023/04/05/synchronized/</url>
    <content><![CDATA[<h2 id="8种加锁现象说明类锁与对象锁"><a href="#8种加锁现象说明类锁与对象锁" class="headerlink" title="8种加锁现象说明类锁与对象锁"></a>8种加锁现象说明类锁与对象锁</h2><h3 id="1-同一资源，两个线程执行两个同步方法"><a href="#1-同一资源，两个线程执行两个同步方法" class="headerlink" title="1.同一资源，两个线程执行两个同步方法"></a>1.同一资源，两个线程执行两个同步方法</h3><ol>
<li>同一资源类里两个同步方法，某一时刻多个线程访问该资源类里的方法，只能有一个线程获取到该资源类的锁<figure class="highlight java"><figcaption><span>class Phone &#123;</span></figcaption><table><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br><br>    &#125;<br><br>输出结果如下：<br>=== Send mail ===<br>=== Send sms ===<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-同一资源，sync1延迟2s，sync2不延迟。"><a href="#2-同一资源，sync1延迟2s，sync2不延迟。" class="headerlink" title="2.同一资源，sync1延迟2s，sync2不延迟。"></a>2.同一资源，sync1延迟2s，sync2不延迟。</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br><br>    &#125;<br>&#125;<br>----------------------------------------------------------------------------------<br>输出:<br>enter sendMail:<span class="hljs-number">1680686700777</span><br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680686702777</span><br>=== Send sms ===<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>线程a执行sendMail获取到锁，线程b需要等待线程a执行完释放资源p的锁，才能执行。</p>
<h3 id="3-同一资源，两个线程分别执行同步方法和普通方法"><a href="#3-同一资源，两个线程分别执行同步方法和普通方法" class="headerlink" title="3.同一资源，两个线程分别执行同步方法和普通方法"></a>3.同一资源，两个线程分别执行同步方法和普通方法</h3><ol start="3">
<li>同一资源类，包含同步方法和普通方法，两个线程分别访问同步方法和普通方法，同步方法延迟2s,结果是先执行普通方法。因为普通方法不需要获取资源的锁，不跟同步代码方法抢锁。<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p.sayHello();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br>---------------------------------------------------------------------------------<br>=== Hello ===<br>=== Send mail ===<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
从结果可以看到，普通方法先执行，虽然同步方法延迟了2s，因为它们不存在锁竞争。</li>
</ol>
<h3 id="4-不同资源p1-p2-两个线程分别执行sync1-sync2，sync1延迟2s"><a href="#4-不同资源p1-p2-两个线程分别执行sync1-sync2，sync1延迟2s" class="headerlink" title="4.不同资源p1,p2,两个线程分别执行sync1,sync2，sync1延迟2s."></a>4.不同资源p1,p2,两个线程分别执行sync1,sync2，sync1延迟2s.</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p2.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br><br>    &#125;<br>&#125;<br>--- 输出:<br>enter sendMail:<span class="hljs-number">1680686953933</span><br>=== Send sms ===<br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680686955933</span><br><br>Process finished with exit code <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure>
<p>因为线程a和b需要的资源不是同一个，所以相互不受影响</p>
<h3 id="5-同一个资源，两个静态sync方法。"><a href="#5-同一个资源，两个静态sync方法。" class="headerlink" title="5.同一个资源，两个静态sync方法。"></a>5.同一个资源，两个静态sync方法。</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br><br>    &#125;<br>&#125;<br>----输出如下：<br>enter sendMail:<span class="hljs-number">1680687225175</span><br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680687227176</span><br>=== Send sms ===<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>先执行静态sync1,再执行静态sync2.</p>
<h3 id="6-两个不同资源1-p2-两个静态sync方法。静态sync1延时2s，线程a和b分别调用p1-sync1和平p2-sync2"><a href="#6-两个不同资源1-p2-两个静态sync方法。静态sync1延时2s，线程a和b分别调用p1-sync1和平p2-sync2" class="headerlink" title="6.两个不同资源1,p2,两个静态sync方法。静态sync1延时2s，线程a和b分别调用p1.sync1和平p2.sync2"></a>6.两个不同资源1,p2,两个静态sync方法。静态sync1延时2s，线程a和b分别调用p1.sync1和平p2.sync2</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p2.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>    &#125;<br>&#125;<br><br>----输出：<br>enter sendMail:<span class="hljs-number">1680687401120</span><br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680687403120</span><br>=== Send sms ===<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>与第5种情况结果一样，因为静态sync方法锁的是整个资源类，同一时刻只能有一个线程拥有该类的持有的锁。静态同步方法锁的是整个类，而普通同步方法锁的是对象this.</p>
<h3 id="7-一个static-sync方法，一个普通方法，同一个资源的情况"><a href="#7-一个static-sync方法，一个普通方法，同一个资源的情况" class="headerlink" title="7.一个static sync方法，一个普通方法，同一个资源的情况"></a>7.一个static sync方法，一个普通方法，同一个资源的情况</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sayHello();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>    &#125;<br>&#125;<br>---输出<br>enter sendMail:<span class="hljs-number">1680695124368</span><br>=== Send sms ===<br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680695126369</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>可以看到static sync与普通sync方法不相互影响，因为static sync锁的是类，而普通sync锁的是对象，不是竞争同一把锁</p>
<h3 id="8-一个static-sync方法，一个普通方法，两个资源的情况"><a href="#8-一个static-sync方法，一个普通方法，两个资源的情况" class="headerlink" title="8.一个static sync方法，一个普通方法，两个资源的情况"></a>8.一个static sync方法，一个普通方法，两个资源的情况</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;enter sendMail:&quot;</span>+System.currentTimeMillis());<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;=== Send mail ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sendMail over:&quot;</span>+System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Send sms ===&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=== Hello ===&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p1.sendMail();<br>        &#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><br>        TimeUnit.MICROSECONDS.sleep(<span class="hljs-number">2000</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            p2.sendSms();<br>        &#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>    &#125;<br>&#125;<br><br>--- <br>enter sendMail:<span class="hljs-number">1680695261446</span><br>=== Send sms ===<br>=== Send mail ===<br>sendMail over:<span class="hljs-number">1680695263448</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<p>结果与7同样，线程a锁的是phone类，而线程2锁的是p2对象，锁的资源都不一样，当然不相互影响。</p>
]]></content>
      <categories>
        <category>syncronized</category>
      </categories>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>电路分析---基础知识</title>
    <url>/2023/04/04/%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="电路分析基础知识"><a href="#电路分析基础知识" class="headerlink" title="电路分析基础知识"></a>电路分析基础知识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>电流</strong><br>通常将正电荷在电路中移动的方向规定为电流的方向，大量的电荷朝一个方向移动时就形成了电流。电流用<em>I</em>表示电流基本单位为安培(简称安),用符号A表示电流的单位，比安更小的单位有毫安(mA)，微安(uA)，它们之间的关系为<br>                        <center> <code>1A = 10^3 mA = 10^6 uA</code></center></p>
<p><strong>电阻</strong><br>电阻器队对电流的阻碍作用称为电阻，通常用”<strong>R</strong>“表示，电阻单位为欧姆(简称欧),符号为<strong>Ω</strong>,比欧更大的单位有千欧，兆欧，换算关系如下：<br>                        <center><code>1MΩ = 10^3 KΩ = 10^6 Ω</code></center></p>
<p><strong>电位</strong><br>电位的单位是伏特(简称伏)，用<strong>V</strong>表示。与山顶往湖里流的水流类似，选取湖面为基准点，假设电位为0,山顶的电位为3V,半山腰电位为1V.</p>
<p><strong>电压</strong><br>电压是表示电位之间的差距,用U表示，Uab表示a、b点之间的电压，即两点之间的电位差。</p>
<p><strong>电动势</strong><br>电源内部将其他形式的能量转换成电能，并在正极和负极间建立的电位差称为电动势。</p>
<p><strong>直流电</strong><br>直流电是指方向始终固定不变的电压或电流，能产生直流电的电源称为直流电源。直流电的电流方向总是从电源正极通过电路流向电源负极。<br>直流电又分为稳定直流电和脉动直流电</p>
<ul>
<li>稳定直流电: 方向固定不变并且大小也不变的直流电</li>
<li>脉动直流电：方向固定不变但大小随时间变化的直流电</li>
</ul>
<p><strong>交流电</strong><br>交流电是指方向和大小都随时间周期性变化的电压或电流，交流电变化周期与评论，重复变化一次所需的时间称为周期，用<strong>T</strong>表示，单位是秒s；交流电每秒内重复变化的次数称为评率，用f表示，计算公式如下 f &#x3D; 1&#x2F;T;单位为赫(Hz).交流电的瞬时值和有效值，瞬时值是指交流电在某一时刻的值，如交流市电电压为220v指的就是有效值，表示交流电压虽然时刻变化，但它的效果与220v的直流电是一样的。</p>
<p><strong>电路三种状态</strong></p>
<ul>
<li>通路：电路畅通，有正常电流流过负载，负载正常工作</li>
<li>开路: 电路断开，无电流流过负载，负载不工作</li>
<li>短路：电路中有很大电流流过，但不经过负载，负载不工作</li>
</ul>
<p><strong>接地</strong><br>接地符号处的电位规定为0v,标有接地符号的地方都是相通的</p>
<p><strong>屏蔽</strong><br>为防止某些元器件和电路工作时受干扰，在元器件之间采取的隔离措施，称为屏蔽。具体做法是用金属材料(称为屏蔽罩)将元器件或电路封闭起来，再将屏蔽罩接地。</p>
<h2 id="电路定理"><a href="#电路定理" class="headerlink" title="电路定理"></a>电路定理</h2><h3 id="欧姆定理"><a href="#欧姆定理" class="headerlink" title="欧姆定理"></a>欧姆定理</h3><p>反应电路中电流、电阻、电压之间的关系，在电路中，流过导体的电流I的大小与导体两端的电压U成正比，与导体的电阻成反比，即</p>
<center>I=U/R</center>

<h3 id="电功率"><a href="#电功率" class="headerlink" title="电功率"></a>电功率</h3><p>电流经过用电设备时会做工，电流做的功称为电功。电流单位时间内做的功称为电功率，用P表示，单位是瓦(W)，1kW &#x3D; 10^3W &#x3D; 10^6 mW</p>
<center>`P=U*I`</center>






<iframe src="//player.bilibili.com/player.html?aid=294922397&bvid=BV1kF411q7GC&cid=462274422&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>






]]></content>
      <tags>
        <tag>电路分析</tag>
      </tags>
  </entry>
  <entry>
    <title>我爱的音乐</title>
    <url>/2023/04/04/%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<h1 id="pianoboy-高志豪"><a href="#pianoboy-高志豪" class="headerlink" title="pianoboy 高志豪"></a>pianoboy 高志豪</h1><hr>
<h2 id="ALONE-ON-THE-WAY"><a href="#ALONE-ON-THE-WAY" class="headerlink" title="ALONE ON THE WAY"></a>ALONE ON THE WAY</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=139718&auto=1&height=66"></iframe>]]></content>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
</search>
